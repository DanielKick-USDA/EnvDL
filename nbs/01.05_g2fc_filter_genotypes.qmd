---
title: 'Filter to observed Genotypes, kegg genes'
jupyter: python3
---


> 


```{python}
import os

import numpy as np
import pandas as pd
pd.set_option('display.max_columns', None)

import plotly.express as px

import hilbertcurve
from hilbertcurve.hilbertcurve import HilbertCurve

from tqdm import tqdm

from EnvDL.core import *
# from EnvDL.kegg import *
from EnvDL.dna import *
```

```{python}
cache_path = '../nbs_artifacts/01.05_g2fc_demo_model/'
ensure_dir_path_exists(dir_path = cache_path)
```

## Load phenotypic data to match

```{python}
load_from = '../nbs_artifacts/01.03_g2fc_prep_matrices/'
phno = pd.read_csv(load_from+'phno_geno.csv')
phno
```

## Filtering SNPs to those in a gene (intron or exon)

==NOTE== In this implementation only the coding strand is used. This is fine for using the raw snps but if the gene sequence is to be used then I'll want to flip the %ACGT to have the complement and be able to more directly interpret any changes. 

```{python}
from EnvDL.kegg import *
```

```{python}
geno_path = '../data/zma/g2fc/genotypes/'
# Useful for converting between the physical location and site
geno_site = pd.read_table(geno_path+'5_Genotype_Data_All_Years_Filter_SiteSummary.txt'
                         ).rename(columns = {'Physical Position':'Position'})
geno_site.head()
```

```{python}
geno_site['kegg_index'] = np.nan
```

```{python}
import pickle as pkl
with open('../data/zma/kegg/kegg_gene_entries.pkl', 'rb') as handle:
    kegg_gene_entries = pkl.load(handle)
```


```{python}
# takes in a position string, returns a list with [chromosome, start, stop, complement]
def parse_kegg_position(POSITION = '7:2815028..2815922'):
    import re
    is_complement = False
    if re.match('.+complement.+', POSITION):
        is_complement = True
        POSITION = POSITION.replace('complement(', '').replace(')', '')

    POSITION = POSITION.replace(':', '..').split('..')

    POSITION = POSITION+['complement' if is_complement else 'coding']
    return(POSITION)
```

```{python}
len(kegg_gene_entries)
```

```{python}
# not all entries have positions and some are unknown
kegg_gene_entries = [e for e in kegg_gene_entries if 'POSITION' in e.keys()]
len(kegg_gene_entries)
```

```{python}
kegg_gene_entries = [e for e in kegg_gene_entries if e['POSITION']!='Unknown']
len(kegg_gene_entries)
```

```{python}
kegg_gene_entry_positions = [parse_kegg_position(e['POSITION']) for e in kegg_gene_entries]
```


```{python}
# drop Plastid genes
is_Pltd = [True if e[0]=='Pltd' else False for e in kegg_gene_entry_positions]


print([kegg_gene_entry_positions[i] for i in range(len(kegg_gene_entry_positions)) if is_Pltd[i] == True  ][0:3])


kegg_gene_entries         = [kegg_gene_entries[i] for i in range(len(kegg_gene_entry_positions)
                                                                ) if is_Pltd[i] != True  ]
kegg_gene_entry_positions = [kegg_gene_entry_positions[i] for i in range(len(kegg_gene_entry_positions)
                                                                        ) if is_Pltd[i] != True  ]

len(kegg_gene_entries)
```

```{python}
# all position entries must have 4 values
is_right_len = [len(e) == 4 for e in kegg_gene_entry_positions]

kegg_gene_entries         = [kegg_gene_entries[i] for i in range(len(kegg_gene_entry_positions)
                                                                ) if is_right_len[i] ]
kegg_gene_entry_positions = [kegg_gene_entry_positions[i] for i in range(len(kegg_gene_entry_positions)
                                                                        ) if is_right_len[i] ]
len(kegg_gene_entries)
```


```{python}
for i in tqdm(range(len(kegg_gene_entries))):
    ith_chr, ith_loc_start, ith_loc_stop, ith_strand = kegg_gene_entry_positions[i]
    mask = ((geno_site.Chromosome == int(ith_chr)
                ) & (geno_site.Position >= int(ith_loc_start)
                ) & (geno_site.Position <= int(ith_loc_stop)) )

    geno_site.loc[mask, 'kegg_index'] = i
```


```{python}
geno_site.loc[np.isnan(geno_site.kegg_index), 'kegg_index'] = -1
geno_site.kegg_index = geno_site.kegg_index.astype(int)
geno_site
```

### Make DataFrames with available entries in KEGG

```{python}
kegg_gene_entry_positions_df = pd.DataFrame(
    kegg_gene_entry_positions, 
             columns = ['chr', 'loc_start', 'loc_stop', 'strand']
            ).reset_index().rename(columns = {'index':'kegg_index'})

kegg_gene_entry_positions_df
```

```{python}
geno_site_in_genes = geno_site.loc[:, [
    'Site Number',
    'Site Name',
    'Chromosome',
    'Position',
    'kegg_index']].loc[geno_site.kegg_index != -1] # Filter to only those with a kegg index
geno_site_in_genes
```

```{python}
geno_site_in_genes = geno_site_in_genes.merge(kegg_gene_entry_positions_df)
geno_site_in_genes
```




### Use above to filter genotype

```{python}
load_from = '../nbs_artifacts/01.03_g2fc_prep_matrices/'
ACGT = np.load(load_from+'ACGT.npy')
```

```{python}
ACGT.shape
```

```{python}
geno_site_in_genes
```

```{python}
# create a lookup table
ACGT_gene_slice_list_to_kegg_lookup = pd.DataFrame(zip(
    [i for i in range(len(geno_site_in_genes.kegg_index.drop_duplicates()))],
    geno_site_in_genes.kegg_index.drop_duplicates()), 
            columns = ['ACGT_gene_slice_list', 'kegg_index'])

ACGT_gene_slice_list_to_kegg_lookup
```

```{python}
geno_site_in_genes.kegg_index.drop_duplicates()
```

```{python}
kegg_gene_entries
```

```{python}
filtered_kegg_gene_entries = []

for i in ACGT_gene_slice_list_to_kegg_lookup.kegg_index:
    filtered_kegg_gene_entries += [kegg_gene_entries[i]]

# filtered_kegg_gene_entries[0]
```

```{python}
ACGT_gene_slice_list = []

for kegg_index in tqdm(geno_site_in_genes.kegg_index.drop_duplicates()):
    # kegg_index = geno_site_in_genes.kegg_index.drop_duplicates()[0]
    site_list = list(geno_site_in_genes.loc[geno_site_in_genes.kegg_index == kegg_index, 'Site Number'])
    ACGT_gene_slice_list += [ACGT[:, :, site_list]]
```

```{python}
# to be able to work with this I need

# `ACGT_gene_slice_list` ----
# Has selected SNPs
#                      ~~Match this with the kegg index using `ACGT_gene_slice_list_to_kegg_lookup`~~
#                      Now matches `filtered_kegg_gene_entries`
#                      |
# ACGT_gene_slice_list[0] (4926, 4, 11)
#                          |
#                          Match this with non-deduplicated genotype (i.e. get the right match for y)
#                          Use `obs_geno_lookup` in '../nbs_artifacts/01.03_g2fc_prep_matrices/'

# `ACGT_gene_slice_list_to_kegg_lookup` 
# Go from position in list to kegg


# `kegg_gene_entries` (The filtered version) ----
# way to build up the network structure from the relevant 
```

```{python}
[len(e) for e in [ACGT_gene_slice_list, filtered_kegg_gene_entries ]]
```

```{python}
put_cached_result(cache_path+'ACGT_gene_slice_list.pkl', ACGT_gene_slice_list)
```

```{python}
# kegg_index	ACGT_gene_slice_list
# np.save(cache_path+'ACGT_list_to_filtered_kegg.pkl', np.asarray(ACGT_gene_slice_list_to_kegg_lookup)) 
```

```{python}
put_cached_result(cache_path+'filtered_kegg_gene_entries.pkl', filtered_kegg_gene_entries)
```

```{python}
# get_cached_result(cache_path+'filtered_kegg_gene_entries.pkl')
```



```{python}
# kegg_gene_entries
```




## Visualize available SNPs with respect to KEGG genes

```{python}
temp = geno_site.groupby('kegg_index'
                 ).count(
                 ).reset_index(
                 ).loc[:, ['kegg_index', 'Chromosome']
                 ].rename(columns = {'Chromosome':'Count'})
temp
```

```{python}
print('Kegg entries with SNPs: '+str(temp[((temp.kegg_index != -1
                                       ) & (temp.Count > 1))].shape[0]))
```

```{python}
px.histogram(temp.loc[(temp.kegg_index != -1),], 
             x = 'Count',
            title= 'Observed SNPS per ')
```

```{python}
print('Kegg entries with SNPs: '+str(temp[(temp.kegg_index != -1)].shape[0]))
```

```{python}
temp = pd.DataFrame(
    zip(
        range(20),
        [temp[((temp.kegg_index != -1) & (temp.Count > i))].shape[0] for i in range(20)]
    ), columns=['MoreThanXSNPs', 'Genes'])

temp.head()
```

```{python}
# decrease appears to be log linear
px.scatter(temp, x = 'MoreThanXSNPs', y = 'Genes', log_y= True)
```

### Consider one KEGG index

```{python}
kegg_index = 35628
```

```{python}
px.scatter(geno_site.loc[(geno_site.kegg_index == kegg_index)], x = 'Position', y = 'Ref' )
```





