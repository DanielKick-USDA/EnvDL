---
title: Explore train/test/validate schemes and the number of observations left with each
jupyter: python3
---


> This notebook is now deprecated. 01.06 implements cv00 selection of test/train and validation sets.


```{python}
import os

import numpy as np
import pandas as pd
# pd.set_option('display.max_columns', None)

import plotly.express as px
import plotly.graph_objects as go

# import hilbertcurve
# from hilbertcurve.hilbertcurve import HilbertCurve

from tqdm import tqdm

from EnvDL.core import *
# from EnvDL.kegg import *
from EnvDL.dna import *
```

```{python}
cache_path = '../nbs_artifacts/01.08_g2fc_explore_train_validate_test_options/'
ensure_dir_path_exists(dir_path = cache_path)
```

## Load phenotypic data to match

```{python}
load_from = '../nbs_artifacts/01.03_g2fc_prep_matrices/'
phno = pd.read_csv(load_from+'phno_geno.csv')
phno
```

Possible testing schemes:
    

```{python}
tally_df = phno.groupby(['Year', 'Geno_Idx']).count().reset_index().loc[:, ['Year', 'Geno_Idx', 'Hybrid']].rename(columns = {'Hybrid': 'n'})
tally_df
```

```{python}
def sim_cv(
    tally_df = tally_df,
    draw_years = 1,
    draw_genos = 1,
    seed_val = 786342786,
    cv_type = 'cv1'
):
    possible_geno = list(set(tally_df.Geno_Idx))
    possible_years = list(set(tally_df.Year))

    test_geno = []
    test_years = []

    np.random.seed(seed_val)
    for i in range(draw_years):
        test_years += [np.random.choice(possible_years)] 
        possible_years = [e for e in possible_years if e not in test_years]

    for i in range(draw_genos):
        test_geno += [np.random.choice(possible_geno)]  
        possible_geno = [e for e in possible_geno if e not in test_geno]

    mask_test_geno = (tally_df.Geno_Idx.isin(test_geno))
    mask_test_year  = (tally_df.Year.isin(test_years))

    mask_train_geno = (tally_df.Geno_Idx.isin(possible_geno))
    mask_train_year  = (tally_df.Year.isin(possible_years))

    out = {'draw_years': draw_years,
           'draw_genos': draw_genos, 
           'seed_val': seed_val}

    if cv_type == 'cv1':
        # CV1 Lines don't overlap
        out['cv1_test']  = np.sum(tally_df.loc[mask_test_geno, 'n'])
        out['cv1_train'] = np.sum(tally_df.loc[mask_train_geno, 'n'])
    if cv_type == 'cv0':
        # CV0 years don't overlap
        out['cv0_test']  = np.sum(tally_df.loc[mask_test_year, 'n'])
        out['cv0_train'] = np.sum(tally_df.loc[mask_train_year, 'n'])
    if cv_type == 'cv00':
        # CV00 years and Lines don't overlap
        out['cv00_test']  = np.sum(tally_df.loc[(mask_test_geno & mask_test_year), 'n'])
        out['cv00_train'] = np.sum(tally_df.loc[(mask_train_geno & mask_train_year), 'n'])
    return(out)
```

```{python}
seed_val = 786342786
np.random.seed(seed_val)

# in lieu of expand.grid :
settings_df = pd.DataFrame(
    {'join_on':'c', "n_year":list(np.linspace(1, 8, 8).astype(int))
    }).merge(pd.DataFrame(
    {'join_on':'c', "n_geno":list(np.linspace(100, 1000, 10).astype(int))
    })).drop(columns = ['join_on'])

settings_df["n_rep"] = [np.random.randint(0, 1e5) for i in range(settings_df.shape[0])]
settings_df
```

### CV1 (filter genotypes)

```{python}
# temp_settings = settings_df.copy()
# # filter down to the first unique entries for the selected columns
# temp_idx = temp_settings.loc[:, ['n_geno']].drop_duplicates().index
# temp_settings = temp_settings.loc[temp_idx, ]
```

```{python}
# df = []
# for i in tqdm(temp_idx):
#     df += [pd.DataFrame(
#             sim_cv(
#                 draw_years = temp_settings.loc[i, 'n_year'],
#                 draw_genos = temp_settings.loc[i, 'n_geno'],
#                 seed_val =   temp_settings.loc[i, 'n_rep'],
#                 cv_type = 'cv1'
#             ), index = [0]
#         )]
    
# df = pd.concat(df)
# df.head()
```

```{python}
# df_summary = df.groupby(['draw_genos']).agg(
#     cv1_test = ('cv1_test', np.mean),
#     cv1_train = ('cv1_train', np.mean)).reset_index()
# df_summary['pr_test'] = df_summary['cv1_test']/(df_summary['cv1_test']+df_summary['cv1_train'])
# df_summary
```

```{python}
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = df['draw_genos'], y = df['cv1_train'], marker_color = 'blue', mode='markers'))
# fig.add_trace(go.Scatter(x = df['draw_genos'], y = df['cv1_test'],  marker_color = 'red', mode='markers'))
# fig.show()
```

### CV0 (filter years)

```{python}
# temp_settings = settings_df.copy()
# # filter down to the first unique entries for the selected columns
# temp_idx = temp_settings.loc[:, ['n_year']].drop_duplicates().index
# temp_settings = temp_settings.loc[temp_idx, ]
```

```{python}
# df = []
# for i in tqdm(temp_idx):
#     df += [pd.DataFrame(
#             sim_cv(
#                 draw_years = temp_settings.loc[i, 'n_year'],
#                 draw_genos = temp_settings.loc[i, 'n_geno'],
#                 seed_val =   temp_settings.loc[i, 'n_rep'],
#                 cv_type = 'cv0'
#             ), index = [0]
#         )]
    
# df = pd.concat(df)
# df.head()
```

```{python}
# df_summary = df.groupby(['draw_years']).agg(
#     cv0_test = ('cv0_test', np.mean),
#     cv0_train = ('cv0_train', np.mean)).reset_index()
# df_summary['pr_test'] = df_summary['cv0_test']/(df_summary['cv0_test']+df_summary['cv0_train'])
# df_summary
```

```{python}
# fig = go.Figure()
# fig.add_trace(go.Scatter(x = df['draw_years'], y = df['cv0_train'], marker_color = 'blue', mode='markers'))
# fig.add_trace(go.Scatter(x = df['draw_years'], y = df['cv0_test'],  marker_color = 'red', mode='markers'))
# fig.show()
```

### CV00 (filter genotypes, years)

```{python}
temp_settings = settings_df.copy()
# filter down to the first unique entries for the selected columns
temp_idx = temp_settings.loc[:, ['n_geno', 'n_year']].drop_duplicates().index
temp_settings = temp_settings.loc[temp_idx, ]
```

```{python}
df = []
for i in tqdm(temp_idx):
    df += [pd.DataFrame(
            sim_cv(
                draw_years = temp_settings.loc[i, 'n_year'],
                draw_genos = temp_settings.loc[i, 'n_geno'],
                seed_val =   temp_settings.loc[i, 'n_rep'],
                cv_type = 'cv00'
            ), index = [0]
        )]
    
df = pd.concat(df)
df.head()
```

```{python}
df_summary = df.groupby(['draw_years', 'draw_genos']).agg(
    cv00_test = ('cv00_test', np.mean),
    cv00_train = ('cv00_train', np.mean)).reset_index()
df_summary['pr_test'] = df_summary['cv00_test']/(df_summary['cv00_test']+df_summary['cv00_train'])
df_summary.loc[((df_summary.pr_test > 0.08)&(df_summary.pr_test < 0.12)), ]
```

```{python}
fig = go.Figure()
fig.add_trace(go.Scatter(x = df['draw_years'], y = df['cv00_train'], marker_color = 'blue', mode='markers'))
fig.add_trace(go.Scatter(x = df['draw_years'], y = df['cv00_test'],  marker_color = 'red', mode='markers'))
fig.show()
```


