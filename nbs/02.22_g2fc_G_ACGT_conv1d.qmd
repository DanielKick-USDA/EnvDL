---
title: G only ACGT Probabilities Hilbert Conv1D
jupyter: python3
---

```{python}
# Hacky way to schedule. Here I'm setting these to sleep until the gpus should be free.
# At the end of the notebooks  os._exit(00) will kill the kernel freeing the gpu. 
#                          Hours to wait
# import time; time.sleep( 6 * (60*60))
```


> 


```{python}
import os, json, re

import numpy as np
import pandas as pd

import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_white"

import hilbertcurve
from hilbertcurve.hilbertcurve import HilbertCurve

from EnvDL.core import * # includes remove_matching_files
from EnvDL.dna  import *
from EnvDL.dlfn import * # includes LSUV_

from tqdm import tqdm

# import os
# import numpy as np
# import pandas as pd

# import plotly.express as px
# import plotly.io as pio
# pio.templates.default = "plotly_white"

# import hilbertcurve
# from hilbertcurve.hilbertcurve import HilbertCurve

# from EnvDL.core import * # includes remove_matching_files
# from EnvDL.dna import *
# from EnvDL.dlfn import *

# from tqdm import tqdm
```

```{python}
use_gpu_num = 0

# Imports --------------------------------------------------------------------
import torch
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
from torch import nn
import torch.nn.functional as F # F.mse_loss

import lightning.pytorch as pl
from lightning.pytorch.loggers import TensorBoardLogger


device = "cuda" if torch.cuda.is_available() else "cpu"
if use_gpu_num in [0, 1]: 
    torch.cuda.set_device(use_gpu_num)
print(f"Using {device} device")
```

```{python}
cache_path = '../nbs_artifacts/02.22_g2fc_G_ACGT_conv1d/'
ensure_dir_path_exists(dir_path = cache_path)
```

## Load data

```{python}
load_from = '../nbs_artifacts/01.03_g2fc_prep_matrices/'
# phno = pd.read_csv(load_from+'phno.csv')
phno_geno = pd.read_csv(load_from+'phno_geno.csv')
phno = phno_geno

obs_geno_lookup = np.load(load_from+'obs_geno_lookup.npy') # Phno_Idx	Geno_Idx	Is_Phno_Idx
YMat = np.load(load_from+'YMat.npy')
# GMat = np.load(load_from+'GMat.npy')
# ACGT_OneHot = np.load(load_from+'ACGT_OneHot.npy')
ACGT = np.load(load_from+'ACGT.npy')
# ACGT_hilb = np.load(load_from+'ACGT_hilb.npy')
# SMat = np.load(load_from+'SMat3.npy')
# WMat = np.load(load_from+'WMat3.npy')
# MMat = np.load(load_from+'MMat3.npy')
```

```{python}
# reduce Size of ACGT ----
# Since these are probabilities we can immediately save 1/4 of the space needed by using ACG instead of ACGT
ACGT = ACGT[:, 0:-1, :]
```



### Create train/test validate indicies from json

```{python}
# rng = np.random.default_rng(9230473) # note, must use rng.shuffle(arr) below for this to take effect.
```

```{python}
# pct_cumsum_thresh = .9

# # make a df to aid in creating train/test splits
# # the plan is to shuffle the rows of the df, calculate the cumulative sum of the percents obs, then 
# # the entries above and below a given percent will be the train/test.
# obs_per_hybrid = phno.assign(n = 1).groupby('Hybrid').count().reset_index()
# obs_per_hybrid = obs_per_hybrid.loc[:, ['Hybrid', 'n']]
# obs_per_hybrid['pct'] = obs_per_hybrid.n / obs_per_hybrid.n.sum()
# obs_per_hybrid['pct_cumsum'] = np.nan
# obs_per_hybrid['random_order'] = 0

# obs_per_hybrid
```

```{python}
# # fill in the random values to sort on
# arr = np.arange(obs_per_hybrid.shape[0])
# rng.shuffle(arr)
# obs_per_hybrid.random_order = arr

# obs_per_hybrid = obs_per_hybrid.sort_values('random_order')
# obs_per_hybrid['pct_cumsum'] = obs_per_hybrid.pct.cumsum()
# obs_per_hybrid
```

```{python}
# # Convert back into phno indices
# train_hybrids = list(obs_per_hybrid.loc[(obs_per_hybrid.pct_cumsum <= pct_cumsum_thresh), 'Hybrid'])
# test_hybrids  = list(obs_per_hybrid.loc[(obs_per_hybrid.pct_cumsum >  pct_cumsum_thresh), 'Hybrid'])

# train_idx = phno.loc[(phno.Hybrid.isin(train_hybrids)), ].index
# test_idx  = phno.loc[(phno.Hybrid.isin(test_hybrids)), ].index
```

```{python}
# [len(train_idx), len(test_idx)]
```

```{python}
# confirm all observation idxs are have genomic information
# assert [] == [e for e in list(train_idx)+list(test_idx) if e not in obs_geno_lookup[:, 0]]
```


```{python}
load_from = '../nbs_artifacts/01.06_g2fc_cluster_genotypes/'

split_info = read_split_info(
    load_from = '../nbs_artifacts/01.06_g2fc_cluster_genotypes/',
    json_prefix = '2023:9:5:12:8:26')

temp = phno.copy()
temp[['Female', 'Male']] = temp['Hybrid'].str.split('/', expand = True)

test_dict = find_idxs_split_dict(
    obs_df = temp, 
    split_dict = split_info['test'][0]
)

temp = temp.loc[test_dict['train_idx'], ] # restrict before re-aplying

val_dict = find_idxs_split_dict(
    obs_df = temp, 
    split_dict = split_info['validate'][0]
)
```

```{python}
train_idx = val_dict['train_idx']
test_idx  = val_dict['test_idx']
```

```{python}
# confirm all observation idxs are have genomic information
assert [] == [e for e in list(train_idx)+list(test_idx) if e not in obs_geno_lookup[:, 0]]
```

## One Hot Encoded




```{python}
YMat_cs = calc_cs(YMat[train_idx])
y_cs = apply_cs(YMat, YMat_cs)
```

```{python}
training_dataloader = DataLoader(
    ACGTDataset(y = torch.from_numpy(y_cs[train_idx])[:, None].to(torch.float), 
                G = torch.from_numpy(ACGT).to(torch.float), 
                idx_original = torch.from_numpy(np.array(train_idx)),
                idx_lookup   = torch.from_numpy(np.asarray(obs_geno_lookup)),
                use_gpu_num = 0,
                device = 'cuda'
               ),
    batch_size = 50,
    shuffle = True
)
```

```{python}
validation_dataloader = DataLoader(
    ACGTDataset(y = torch.from_numpy(y_cs[test_idx])[:, None].to(torch.float), 
                G = torch.from_numpy(ACGT).to(torch.float), 
                idx_original = torch.from_numpy(np.array(test_idx)),
                idx_lookup   = torch.from_numpy(np.asarray(obs_geno_lookup)),
                use_gpu_num = 0,
                device = 'cuda'
               ),
    batch_size = 50,
    shuffle = True
)
```

```{python}
next(iter(training_dataloader))[0].shape
```

```{python}
def Conv1D_Max_block(in_channels, out_channels, kernel_size, stride):
    block = nn.Sequential(
        nn.Conv1d(
            in_channels= in_channels, # second channel
            out_channels= out_channels,
            kernel_size= kernel_size,
            stride= stride
        ), 
        nn.MaxPool1d((kernel_size,), stride=stride)
    )
    return(block)
```

```{python}
class NeuralNetwork(nn.Module):
    def __init__(self):
        super(NeuralNetwork, self).__init__()    

#         def Linear_block(in_size, out_size, drop_pr):
#             block = nn.Sequential(
#                 nn.Linear(in_size, out_size),
#                 nn.ReLU(),
#                 nn.Dropout(drop_pr)
#             )
#             return(block)         
        
        
#         def Conv1D_Max_block(in_channels, out_channels, kernel_size, stride):
#             block = nn.Sequential(
#                 nn.Conv1d(
#                     in_channels= in_channels, # second channel
#                     out_channels= out_channels,
#                     kernel_size= kernel_size,
#                     stride= stride
#                 ), 
#                 nn.MaxPool1d((kernel_size,), stride=stride)
#             )
#             return(block)
        
        self.x_network = nn.Sequential(
            Conv1D_Max_block(3, 3, 3, 2),
            Conv1D_Max_block(3, 3, 3, 2),
            Conv1D_Max_block(3, 3, 3, 2),
            Conv1D_Max_block(3, 3, 3, 2),
            Conv1D_Max_block(3, 3, 3, 2),
            Conv1D_Max_block(3, 3, 3, 2)
        )
        
    
        self.x_pred = nn.Sequential(
                nn.Flatten(),           
                Linear_block(in_size = 87, out_size = 32, drop_pr = 0.3),
                nn.Linear(32, 1)
            )

    def forward(self, x):
        out = self.x_network(x)
        pred = self.x_pred(out)
        return pred, out

#     def forward(self, x):
#         x_out = self.x_network(x)
#         return x_out

model = NeuralNetwork().to(device)

# model(next(iter(training_dataloader))[0][0:5])[0].shape
```

```{python}
# class NeuralNetwork(nn.Module):
#     def __init__(self):
#         super(NeuralNetwork, self).__init__()    

# #         def Linear_block(in_size, out_size, drop_pr):
# #             block = nn.Sequential(
# #                 nn.Linear(in_size, out_size),
# #                 nn.ReLU(),
# #                 nn.Dropout(drop_pr)
# #             )
# #             return(block)         
        
        
# #         def Conv1D_Max_block(in_channels, out_channels, kernel_size, stride):
# #             block = nn.Sequential(
# #                 nn.Conv1d(
# #                     in_channels= in_channels, # second channel
# #                     out_channels= out_channels,
# #                     kernel_size= kernel_size,
# #                     stride= stride
# #                 ), 
# #                 nn.MaxPool1d((kernel_size,), stride=stride)
# #             )
# #             return(block)
        
#         self.x_network = nn.Sequential(
#             nn.Conv2d(
#                     in_channels= 4, 
#                     out_channels= 4,
#                     kernel_size= (3, 3),
#                     stride= 2,
#                     padding = 1,
#                     bias = True
#                 ),
#             nn.Conv2d(
#                     in_channels= 4, 
#                     out_channels= 4,
#                     kernel_size= (3, 3),
#                     stride= 2,
#                     padding = 1,
#                     bias = True
#                 ),
#             nn.Conv2d(
#                     in_channels= 4, 
#                     out_channels= 4,
#                     kernel_size= (3, 3),
#                     stride= 2,
#                     padding = 1,
#                     bias = True
#                 ),
#             nn.Conv2d(
#                     in_channels= 4, 
#                     out_channels= 4,
#                     kernel_size= (3, 3),
#                     stride= 2,
#                     padding = 1,
#                     bias = True
#                 ),
#             nn.Conv2d(
#                     in_channels= 4, 
#                     out_channels= 4,
#                     kernel_size= (3, 3),
#                     stride= 2,
#                     padding = 1,
#                     bias = True
#                 )
#         )
        
#         self.x_pred = nn.Sequential(
#             nn.Flatten(),            
#             nn.Linear(512, 1)
#         )
        
#     def forward(self, x):
#         out = self.x_network(x)
#         pred = self.x_pred(out)
#         return pred, out

# model = NeuralNetwork().to(device)

# # model(next(iter(training_dataloader))[0])[0].shape

# # torch.Size([50, 4, 256, 512])
```

```{python}
LSUV_(model, next(iter(training_dataloader))[0])
```

```{python}
# Module for training subnetworks.
class plDNN_ACGT(pl.LightningModule):
    def __init__(self, mod):
        super().__init__()
        self.mod = mod
        
    def training_step(self, batch, batch_idx):
        g_i, y_i = batch
        pred, out = self.mod(g_i)
        loss = F.mse_loss(pred, y_i)
        self.log("train_loss", loss)
        
        with torch.no_grad():
            weight_list=[(name, param) for name, param in model.named_parameters() if name.split('.')[-1] == 'weight']
            for l in weight_list:
                self.log(("train_mean"+l[0]), l[1].mean())
                self.log(("train_std"+l[0]), l[1].std())        
        return(loss)
        
    def validation_step(self, batch, batch_idx):
        g_i, y_i = batch
        pred, out = self.mod(g_i)
        loss = F.mse_loss(pred, y_i)
        self.log('val_loss', loss)        
     
    def configure_optimizers(self, **kwargs):
        optimizer = torch.optim.Adam(self.parameters(), **kwargs)
        return optimizer    
```

```{python}
max_epoch = 200
DNNG = plDNN_ACGT(model)     
optimizer = DNNG.configure_optimizers()

logger = TensorBoardLogger("tb_logs", name="g-acgt-conv1")
trainer = pl.Trainer(max_epochs=max_epoch, logger=logger)

trainer.fit(model=DNNG, train_dataloaders=training_dataloader, val_dataloaders=validation_dataloader)
```

```{python}
torch.save(DNNG.mod, cache_path+'g-acgt-conv1'+'.pt')
```

